// Initialize your database connection
	// Initialize your database connection
	dbPath := "db.db" // Provide the path to your SQLite database file
	storageInstance, err := storage.NewSqliteStorage(dbPath)
	if err != nil {
		log.Fatal(err)
	}
	defer storageInstance.Close() // Defer closing the database connection

	// Define the table name and read the schema from the SQL file
	tableName := "persons" // Change this to your desired table name
	//schemaFilePath := "/home/isak/goProjects/gin-twitter/storage/schemas/person.sql" // Path to your SQL schema file
	//
	//schemaBytes, readErr := os.ReadFile(schemaFilePath)
	//if readErr != nil {
	//	log.Fatal(readErr)
	//}

	//schema := string(schemaBytes)

	// Call CreateTable to create the table with the specified schema
	//err = storageInstance.CreateTable(tableName, schema)
	//if err != nil {
	//	log.Println("Error:", err)
	//	return
	//}

	//person := &types.Person{
	//	FirstName: "Isak",
	//	LastName:  "Axelsson",
	//	UserName:  "swagger99",
	//	Verified:  false,
	//	Joined:    &time.Time{},
	//}

	// Call Create to insert the person into the table
	//createErr := storageInstance.Create(tableName, person)
	//if createErr != nil {
	//	log.Println("Error creating person:", createErr)
	//	return
	//}

	// The table has been created successfully

	// Rest of your code...
	// Change this to your desired table name
	setClause := "verified = ?"       // Change this to your update logic
	whereCondition := "user_name = ?" // Change this to your update condition
	userName := "swagger99"           // Change this to your update parameter

	// Call the Update method to update the record
	err = storageInstance.Update(tableName, setClause, whereCondition, true, userName)
	if err != nil {
		log.Println("Error:", err)
		return
	}
	result, getErr := storageInstance.Get(tableName, "user_name = ?", "swagger99")
	if getErr != nil {
		log.Println("Error retrieving person:", getErr)
		return
	}

	// Process the result as needed
	if person, ok := result.(*types.Person); ok {
		log.Printf("Retrieved person: %+v\n", person)
	} else {
		log.Println("Invalid data type retrieved")
	}